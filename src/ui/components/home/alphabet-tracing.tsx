import {
  Canvas,
  Circle,
  Fill,
  Mask,
  Morphology,
  Path,
  Skia,
} from "@shopify/react-native-skia";
import clsx from "clsx";
import { useEffect } from "react";
import { View } from "react-native";
import { Gesture, GestureDetector } from "react-native-gesture-handler";
import Animated, {
  useAnimatedStyle,
  useSharedValue,
} from "react-native-reanimated";

import { WIDTH } from "@/utils/layout";

const letterCoordinatesToRender = {
  N: "M14 166C10.5333 166 7.33333 164.933 4.4 162.8C1.46667 160.667 7.15256e-07 157.467 7.15256e-07 153.2V18.4C7.15256e-07 12.2667 1.86667 7.73332 5.6 4.8C9.6 1.59999 13.8667 -1.23978e-05 18.4 -1.23978e-05C25.3333 -1.23978e-05 30.4 2.66666 33.6 7.99999L99.6 111.6C100.933 113.733 102.4 114.8 104 114.8C106.4 114.8 107.6 112.933 107.6 109.2L106 12.8C106 8.53332 107.467 5.33332 110.4 3.19999C113.333 1.06666 116.533 -1.23978e-05 120 -1.23978e-05C123.467 -1.23978e-05 126.667 1.06666 129.6 3.19999C132.533 5.33332 134 8.53332 134 12.8V148.4C134 154.267 132.267 158.667 128.8 161.6C125.333 164.533 121.333 166 116.8 166C113.6 166 110.4 165.2 107.2 163.6C104.267 162.267 101.733 160 99.6 156.8L34.8 56C33.4667 53.8667 32 52.8 30.4 52.8C28 52.8 26.8 54.6667 26.8 58.4L28 153.2C28 157.467 26.5333 160.667 23.6 162.8C20.9333 164.933 17.7333 166 14 166Z",
  T: "M62 164C57.7333 164 54.2667 162.8 51.6 160.4C49.2 158 48 154.933 48 151.2V34.8C48 28.1333 44.5333 24.8 37.6 24.8H12.4C4.13333 24.8 2.83122e-07 20.6667 2.83122e-07 12.4C2.83122e-07 4.13333 4.13333 -2.38419e-06 12.4 -2.38419e-06H111.2C114.933 -2.38419e-06 118 1.19999 120.4 3.59999C122.8 5.73332 124 8.66666 124 12.4C124 16.1333 122.8 19.2 120.4 21.6C118 23.7333 114.933 24.8 111.2 24.8H86.4C79.4667 24.8 76 28.1333 76 34.8V151.2C76 154.933 74.6667 158 72 160.4C69.6 162.8 66.2667 164 62 164Z",
  I: "M14 166C10.5333 166 7.33334 164.8 4.4 162.4C1.46667 160.267 2.98023e-07 157.067 2.98023e-07 152.8V13.2C2.98023e-07 8.66666 1.46667 5.33332 4.4 3.19999C7.33334 1.06666 10.5333 -1.23978e-05 14 -1.23978e-05C17.7333 -1.23978e-05 20.9333 1.06666 23.6 3.19999C26.5333 5.33332 28 8.66666 28 13.2V152.8C28 157.067 26.5333 160.267 23.6 162.4C20.9333 164.8 17.7333 166 14 166Z",
  P: "M18 166C13.2 166 8.93333 164.4 5.2 161.2C1.73333 157.733 7.15256e-07 153.733 7.15256e-07 149.2V26C7.15256e-07 18.2667 2.4 12 7.2 7.19999C12 2.39999 18.2667 -1.23978e-05 26 -1.23978e-05H66.4C82.4 -1.23978e-05 95.6 4.53332 106 13.6C116.667 22.6667 122 34.6667 122 49.6C122 65.8667 116.8 79.0667 106.4 89.2C96 99.3333 82.8 104.4 66.8 104.4H43.2C37.8667 104.4 35.2 107.067 35.2 112.4L36 149.2C36 153.733 34.1333 157.733 30.4 161.2C26.9333 164.4 22.8 166 18 166ZM41.2 72.4H62.4C78.9333 72.4 87.2 65.6 87.2 52C87.2 38.6667 79.4667 32 64 32H41.2C37.2 32 35.2 34 35.2 38V66.4C35.2 70.4 37.2 72.4 41.2 72.4Z",
  A: "M16.5 210C12.1667 210 8.33333 208.5 5 205.5C1.66667 202.5 7.07805e-07 198.5 7.07805e-07 193.5C7.07805e-07 191.833 0.333334 189.667 1 187L63.5 17.5C65.8333 11.8333 69.3333 7.49999 74 4.49999C78.6667 1.49999 83.6667 -1.3113e-05 89 -1.3113e-05C94.3333 -1.3113e-05 99.3333 1.49999 104 4.49999C109 7.49999 112.667 11.8333 115 17.5L181.5 187C182.167 189.667 182.5 191.833 182.5 193.5C182.5 198.5 180.833 202.5 177.5 205.5C174.167 208.5 170.333 210 166 210C163 210 159.833 209.167 156.5 207.5C153.5 206.167 151.167 203.833 149.5 200.5L133 156.5C132.667 154.5 131.333 153.5 129 153.5H52.5C50.1667 153.5 48.6667 154.5 48 156.5L33 200.5C31.3333 203.833 28.8333 206.167 25.5 207.5C22.5 209.167 19.5 210 16.5 210ZM67.5 123.5H112.5C114.5 123.5 116 122.833 117 121.5C118.333 119.833 118.667 117.833 118 115.5L94 47C93 43.6667 91.5 42 89.5 42C87.1667 42 85.5 43.6667 84.5 47L62 116C61.3333 118 61.5 119.833 62.5 121.5C63.8333 122.833 65.5 123.5 67.5 123.5Z",
  n: "M 8.7 89.465 C 17.523 89.956 24.277 97.507 23.785 106.33 C 22.163 135.338 18.284 174.627 21.808 197.649 C 20.62 189.36 13.24 183.389 4.886 183.957 C -3.469 184.524 -9.973 191.438 -10.03 199.812 C -9.936 188.497 -10.952 171.535 -9.797 154.795 C -8.637 137.976 -3.289 118.088 6.991 105.375 C 14.856 98.007 26.565 92.425 35.632 92.035 C 44.686 91.646 56.002 95.522 63.625 100.288 C 73.022 107.92 79.546 118.76 81.268 127.313 C 82.953 135.684 82.595 144.108 82.932 150.633 C 83.695 168.682 79.382 198.93 79.382 198.93 C 79.346 200.158 79.382 198.93 79.382 198.93 C 79.297 204.642 76.167 209.873 71.174 212.648 C 66.181 215.423 60.086 215.32 55.191 212.377 C 50.295 209.433 47.344 204.099 47.453 198.388 C 47.453 198.388 47.502 197.944 47.453 198.388 C 47.453 198.388 49.912 182.208 50.529 174.647 C 51.148 167.074 51.362 159.964 50.968 152.15 C 50.626 144.237 50.837 138.296 49.897 133.629 C 48.994 129.145 49.698 128.271 45.636 126.753 C 42.221 124.021 40.629 123.849 37.006 124.005 C 33.395 124.16 32.655 123.712 30.39 127.204 C 24.071 132.281 23.136 142.369 22.127 156.998 C 21.112 171.705 22.036 187.663 21.97 200.028 C 21.913 208.402 15.409 215.316 7.054 215.883 C -1.3 216.451 -8.68 210.48 -9.868 202.191 C -13.484 175.413 -9.743 132.962 -8.165 104.55 C -7.674 95.727 -0.123 88.973 8.7 89.465 Z",
  t: "M 69.857 3.746 C 70.156 -1.962 67.387 -7.396 62.592 -10.509 C 57.798 -13.622 51.707 -13.941 46.614 -11.345 C 41.521 -8.749 38.2 -3.634 37.902 2.075 C 37.902 2.075 37.899 2.152 37.902 2.075 C 37.902 2.075 37.48 17.287 37.09 25.78 C 36.7 34.28 36.213 43.213 35.693 52.076 C 34.652 69.8 33.488 87.017 32.755 98.914 C 30.326 138.301 28.793 162.79 29.143 177.673 C 29.33 185.636 30.332 193.141 32.217 197.959 C 33.432 201.065 36.322 205.396 38.765 207.548 C 41.456 209.918 46.5 211.954 49.429 212.731 C 56.142 213.256 65.83 211.579 71.507 208.966 C 77.194 206.348 84.492 200.488 88.254 195.726 C 93.041 188.299 90.901 178.397 83.473 173.609 C 76.046 168.822 66.144 170.962 61.356 178.39 C 61.818 178.748 61.166 178.498 58.126 179.898 C 55.075 181.302 55.957 181.083 55.632 181.366 C 56.273 181.737 59.007 182.734 59.915 183.533 C 60.575 184.114 61.992 186.234 62.018 186.3 C 61.524 185.039 61.281 183.154 61.134 176.921 C 60.817 163.411 62.264 140.284 64.695 100.882 C 65.422 89.079 66.588 71.816 67.637 53.952 C 68.686 36.092 69.857 3.746 69.857 3.746 C 69.861 3.68 69.857 3.746 69.857 3.746 Z",
  i: "M9 89C7.26667 89 5.66667 88.4667 4.2 87.4C2.86667 86.3333 2.2 84.8 2.2 82.8V34.8C2.2 32.5333 2.86667 30.8667 4.2 29.8C5.66667 28.6 7.26667 28 9 28C10.7333 28 12.2667 28.6 13.6 29.8C15.0667 30.8667 15.8 32.5333 15.8 34.8V82.8C15.8 84.8 15.0667 86.3333 13.6 87.4C12.2667 88.4667 10.7333 89 9 89ZM9.2 17C6.66667 17 4.46667 16.2 2.6 14.6C0.866667 12.8667 2.38419e-07 10.8 2.38419e-07 8.4C2.38419e-07 6.13333 0.866667 4.2 2.6 2.6C4.46667 0.866661 6.66667 -6.4373e-06 9.2 -6.4373e-06C11.6 -6.4373e-06 13.6667 0.866661 15.4 2.6C17.1333 4.2 18 6.13333 18 8.4C18 10.8 17.1333 12.8667 15.4 14.6C13.6667 16.2 11.6 17 9.2 17Z",
  p: "M31.2 61C27.4667 61 24.1333 60.3333 21.2 59C18.2667 57.8 15.7333 56.1333 13.6 54V81.8C13.6 83.8 12.8667 85.3333 11.4 86.4C10.0667 87.4667 8.53333 88 6.8 88C5.06667 88 3.46667 87.4667 2 86.4C0.666667 85.3333 5.66244e-07 83.8 5.66244e-07 81.8V7.8C5.66244e-07 5.53333 0.666667 3.86667 2 2.8C3.46667 1.6 5.06667 0.999996 6.8 0.999996C8.4 0.999996 9.86667 1.53333 11.2 2.6C12.5333 3.53333 13.3333 4.93333 13.6 6.8C15.7333 4.8 18.2667 3.2 21.2 1.99999C24.1333 0.666663 27.4667 -3.33786e-06 31.2 -3.33786e-06C37.0667 -3.33786e-06 42.2 1.33333 46.6 4C51.1333 6.53333 54.6667 10.0667 57.2 14.6C59.7333 19.1333 61 24.2667 61 30C61 35.8667 59.7333 41.2 57.2 46C54.6667 50.6667 51.1333 54.3333 46.6 57C42.2 59.6667 37.0667 61 31.2 61ZM30 48.6C35.2 48.6 39.4 46.9333 42.6 43.6C45.8 40.1333 47.4 35.6 47.4 30C47.4 24.6667 45.8 20.4 42.6 17.2C39.4 14 35.2 12.4 30 12.4C24.9333 12.4 20.9333 14 18 17.2C15.0667 20.4 13.6 24.6667 13.6 30C13.6 35.6 15.0667 40.1333 18 43.6C20.9333 46.9333 24.9333 48.6 30 48.6Z",
  a: "M31.44,98.34c-4.96,0-10.16-1.21-15.02-4.29C1.8,84.8-1.39,66.37.49,52.21,3.26,31.33,14.11,11.8,26.89,4.73c11.16-6.18,19.36-6.07,32.21,1.74l-.05-1.28c-.1-2.73,2-5.03,4.72-5.18,2.76-.15,5.07,1.91,5.26,4.63.36,5.01.71,10.02,1.06,15.03.48,6.85.6,14.08.35,22.14l.66,17.48c.34,9.07.89,16.47,4.62,22.3,1.96,3.07,5.48,5.53,8.96,6.25,1.63.34,4.01.46,6.09-.94,2.29-1.54,5.4-.92,6.94,1.37,1.54,2.29.92,5.4-1.37,6.94-3.88,2.59-8.74,3.46-13.7,2.42-6.17-1.29-11.9-5.27-15.34-10.66-2.01-3.15-3.34-6.54-4.22-9.98-2.56,4.15-5.71,8.05-9.18,12.17-3.75,4.44-12.67,9.17-22.47,9.17ZM41.26,10.33c-3.25,0-6.08,1.24-9.52,3.15-9.86,5.46-19.04,22.68-21.34,40.05-1.48,11.1.73,25.35,11.36,32.07,9.49,6,21.48.7,24.51-2.88,7.57-8.97,12.59-15.65,13.39-26.37.38-5.17.65-9.97.79-14.5l-.88-23.09c-8.63-6.11-13.87-8.43-18.31-8.43Z",
};

const getPathStartPoint = (pathData: string): { x: number; y: number } => {
  const match = pathData.match(/M\s*(-?\d+(\.\d+)?)\s*(-?\d+(\.\d+)?)/);
  if (match) {
    return { x: parseFloat(match[1]), y: parseFloat(match[3]) };
  }
  return { x: 0, y: 0 }; // Default to (0, 0) if no match found
};

type AlphabetTracingProps = {
  letter: string;
  isOverlayAnimation: boolean;
};

const STROKE_WIDTH = 50;

const radius = 40;

const AlphabetTracing = ({
  letter,
  isOverlayAnimation,
}: AlphabetTracingProps) => {
  const letterPath = Skia.Path.MakeFromSVGString(
    letterCoordinatesToRender[letter as "A" | "T" | "P" | "I" | "N"],
  )!;
  const drawPath = useSharedValue(Skia.Path.Make());

  const x = useSharedValue(50);
  const y = useSharedValue(50);

  const style = useAnimatedStyle(() => ({
    position: "absolute",
    top: -radius,
    left: -radius,
    width: radius * 2,
    zIndex: 50,
    height: radius * 2,
    transform: [{ translateX: x.value }, { translateY: y.value }],
  }));

  const gesture = Gesture.Pan()
    .onBegin((event) => {
      drawPath.value.moveTo(event.x, event.y);
      drawPath.modify();
    })
    .onChange((event) => {
      x.value = event.x;
      y.value = event.y;
      drawPath.value.lineTo(event.x, event.y);
      drawPath.modify();
    });

  const canvasWidth = WIDTH;
  const canvasHeight = 256;

  // Get the bounding box of the letter path
  const bounds = letterPath.getBounds();

  // Calculate the scaling factor to fit the letter within the canvas
  const scale =
    Math.min(canvasWidth / bounds.width, canvasHeight / bounds.height) * 0.8; // 0.8 to leave some margin
  console.log({ scale });
  console.log({ canvasWidth });
  console.log(bounds.width, "bounds.width");
  // Calculate the translation to center the letter
  const centerX = canvasWidth / 2 - (bounds.x + bounds.width / 2) * scale;
  const centerY = canvasHeight / 2 - (bounds.y + bounds.height / 2) * scale;

  const matrix = Skia.Matrix();
  matrix.scale(scale, scale);
  matrix.translate(centerX / scale, centerY / scale);
  letterPath.transform(matrix);

  useEffect(() => {
    drawPath.value = Skia.Path.Make();
    const startPoint = getPathStartPoint(
      letterCoordinatesToRender[letter as "A" | "T" | "P" | "I" | "N"],
    );
    x.value = startPoint.x * scale + centerX;
    y.value = startPoint.y * scale + centerY;
  }, [letter, drawPath, x, y, scale, centerX, centerY]);

  return (
    <GestureDetector gesture={gesture}>
      <View
        className={clsx(
          "relative  h-72 w-full items-center justify-center border-pink-500",
          {
            "pointer-events-none -z-20": isOverlayAnimation,
            "z-20": !isOverlayAnimation,
          },
        )}
      >
        <Canvas
          style={{
            height: canvasHeight,
            width: canvasWidth,
          }}
        >
          <Fill color="white" />
          {/* Letter black border */}
          <Path path={letterPath} color="#E4E4E7" strokeWidth={10 / scale}>
            <Morphology radius={6 / scale} />
          </Path>

          {/* Letter white background */}
          <Path path={letterPath} color="#E4E4E7" strokeWidth={10 / scale}>
            <Morphology radius={3 / scale} />
          </Path>

          <Mask
            mask={
              <Path
                path={drawPath}
                color="black"
                strokeWidth={STROKE_WIDTH}
                style="stroke"
              />
            }
          >
            <Path path={letterPath} color="black" strokeWidth={10 / scale} />
          </Mask>
          {!isOverlayAnimation && (
            <Circle cx={x} cy={y} r={12} color="#C385F8" />
          )}
        </Canvas>
        <Animated.View style={style} className={"z-50"} />
      </View>
    </GestureDetector>
  );
};

export default AlphabetTracing;
